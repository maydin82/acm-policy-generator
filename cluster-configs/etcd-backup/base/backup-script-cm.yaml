apiVersion: v1
data:
  etcd-backup.sh: |+

    DATE=$(date +%Y%m%dT%H%M%S)

    /usr/local/bin/etcd-snapshot-backup-disconnected.sh /assets/backup

    if [ $? -eq 0 ]; then
        mkdir /etcd-backup/${DATE}
        cp -r /assets/backup/*  /etcd-backup/${DATE}/
        echo 'Copied backup files to PVC mount point.'
        exit 0
    fi

    echo "Backup attempts failed. Please FIX !!!"
    exit 1

  etcd-snapshot-backup-disconnected.sh: |+

    set -o errexit
    set -o pipefail
    set -o errtrace

    if [[ $EUID -ne 0 ]]; then
      echo "This script must be run as root"
      exit 1
    fi

    function usage {
      echo 'Path to backup dir required: ./cluster-backup.sh <path-to-backup-dir>'
      exit 1
    }


    if [ -z "$1" ] || [ -f "$1" ]; then
      usage
    fi

    if [ ! -d "$1" ]; then
      mkdir -p $1
    fi

    function backup_latest_kube_static_resources {

      RESOURCES=("$@")

      LATEST_RESOURCE_DIRS=()
      for RESOURCE in "${RESOURCES[@]}"; do
        LATEST_RESOURCE=$(ls -trd "${CONFIG_FILE_DIR}"/static-pod-resources/${RESOURCE}-[0-9]* | tail -1) || true
        if [ -z "$LATEST_RESOURCE" ]; then
          echo "error finding static-pod-resource ${RESOURCE}"
          exit 1
        fi

        echo "found latest ${RESOURCE}: ${LATEST_RESOURCE}"
        LATEST_RESOURCE_DIRS+=("${LATEST_RESOURCE#${CONFIG_FILE_DIR}/}")
      done

      tar -cpzf $BACKUP_TAR_FILE -C ${CONFIG_FILE_DIR} "${LATEST_RESOURCE_DIRS[@]}"
     }

      BACKUP_DIR="$1"

      DATESTRING=$(date "+%F_%H%M%S")

      BACKUP_TAR_FILE=${BACKUP_DIR}/static_kuberesources_${DATESTRING}.tar.gz

      SNAPSHOT_FILE="${BACKUP_DIR}/snapshot_${DATESTRING}.db"

      BACKUP_RESOURCE_LIST=("kube-apiserver-pod" "kube-controller-manager-pod" "kube-scheduler-pod" "etcd-pod")

      trap "rm -f ${BACKUP_TAR_FILE} ${SNAPSHOT_FILE}" ERR

      source /etc/kubernetes/static-pod-resources/etcd-certs/configmaps/etcd-scripts/etcd.env

      source /etc/kubernetes/static-pod-resources/etcd-certs/configmaps/etcd-scripts/etcd-common-tools

      if [ ! -f "$ETCDCTL_CACERT" ] && [ ! -d "${CONFIG_FILE_DIR}/static-pod-certs" ]; then
        ln -s ${CONFIG_FILE_DIR}/static-pod-resources/etcd-certs ${CONFIG_FILE_DIR}/static-pod-certs
      fi

      backup_latest_kube_static_resources "${BACKUP_RESOURCE_LIST[@]}"

      etcdctl snapshot save ${SNAPSHOT_FILE}

      echo "snapshot db and kube resources are successfully saved to ${BACKUP_DIR}"

kind: ConfigMap
metadata:
  name: etcd-backup-script
  namespace: etcdbackup
